[{"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\index.js":"1","C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\reportWebVitals.js":"2","C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\api\\fetchweather.js":"3","C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\App.jsx":"4","C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\components\\Slider.js":"5"},{"size":146,"mtime":1606426119701,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":351,"mtime":1606428553915,"results":"9","hashOfConfig":"7"},{"size":393,"mtime":1606348369335,"results":"10","hashOfConfig":"7"},{"size":7553,"mtime":1610323494067,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1iy73mo",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\index.js",[],["27","28"],"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\reportWebVitals.js",[],"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\api\\fetchweather.js",[],["29","30"],"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\App.jsx",["31","32","33","34"],"import React from \"react\";\r\nimport {fetchweather} from './api/fetchweather';\r\nimport {Swiper, SwiperSlide} from 'swiper/react';\r\nimport SwiperCore from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\nimport './App.css';\r\nimport './components/DisplayTimer.css'\r\nimport Slider from './components/Slider';\r\n\r\nconst App = () =>{\r\n return(\r\n       <Slider/>\r\n        \r\n    )\r\n};\r\nexport default App;",["35","36"],"C:\\Users\\ysoni\\Desktop\\mnimial\\reactsj\\weather-stopwatch\\src\\components\\Slider.js",["37","38","39","40"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport ReactDOM from 'react-dom';\r\nimport {fetchweather} from '../api/fetchweather';\r\n// import {Swiper, SwiperSlide} from 'swiper/react';\r\nimport SwiperCore from 'swiper';\r\nimport Swiper from 'react-id-swiper';\r\nimport 'swiper/swiper-bundle.css';\r\n\r\n\r\n\r\nconst sliderconfig = {\r\n    containerClass: 'swiper-container',\r\n    parallax: true,\r\n    effect:'slide'\r\n}\r\n\r\n\r\n   \r\nconst Slider = () =>{\r\n    const [parallaxSwiper,setParallaxSwiper] = useState(null);\r\n    const [query, setQuery] = useState('') ;\r\n    const [weather, setWeather] = useState({});\r\n    const countRef = useRef(null);\r\n\r\n\r\n    const search = async(e) =>{\r\n            if(e.key === 'Enter'){\r\n                const data = await fetchweather(query);\r\n                setWeather(data);\r\n                setQuery('');\r\n            }\r\n    }\r\n   \r\n    const currenttime = new Date().getHours();\r\n    if(document.body){\r\n        if (7<= currenttime && currenttime < 20) {\r\n            document.body.className =\"day\";\r\n        }\r\n        else{\r\n            document.body.className =\"night\";\r\n        }\r\n    }\r\n  \r\n\r\n    let [seconds, setSeconds] = useState(0);\r\n    let [minutes, setMinutes] =  useState(0);\r\n    let [hours, setHours] = useState(0);\r\n    const [Active, setActive] = useState(false);\r\n    const [Pause, setPause] = useState(false);\r\n\r\n    // for starting watch\r\n    const watchstart =() =>{\r\n        setActive (true)\r\n        setPause (true)\r\n        countRef.current = setInterval(() => {\r\n            setSeconds(seconds++);\r\n            if(seconds/60 === 1)\r\n            {\r\n                seconds =0;\r\n                setMinutes(prevState => prevState + 1);\r\n  \r\n                if(minutes/60 === 1){\r\n                    minutes=0;   \r\n                    setHours(prevState => prevState + 1);\r\n                }\r\n            } \r\n           \r\n          }, 1000);\r\n    }\r\n\r\n    // for pause\r\n    const watchpause=()=>{\r\n        setPause(false)\r\n        clearInterval(countRef.current)\r\n    }\r\n\r\n    // for resuming time\r\n    const watchresume=()=>{\r\n        setPause(true)\r\n        countRef.current = setInterval(() => {\r\n            setSeconds(seconds++);\r\n            if(seconds/60 === 1)\r\n            {\r\n                seconds =0;\r\n                setMinutes(prevState => prevState + 1);\r\n  \r\n                if(minutes/60 === 1){\r\n                    minutes=0;   \r\n                    setHours(prevState => prevState + 1);\r\n                }\r\n            } \r\n           \r\n          }, 1000);\r\n        \r\n    } \r\n\r\n    // for resetting time\r\n    const watchreset =() =>{\r\n        setPause(false)\r\n        setActive(false)\r\n        clearInterval(countRef.current)\r\n        setSeconds(0)\r\n        setMinutes(0)\r\n        setHours(0)\r\n    }\r\n\r\n    let displayseconds = \"0\" +seconds.toString();\r\n    if(seconds>9){\r\n        displayseconds = seconds;\r\n    }\r\n    let displayminutes = \"0\" +minutes.toString();\r\n    if(minutes>9){\r\n        displayminutes = minutes;\r\n    }\r\n    let displayhours = \"0\" +hours.toString();\r\n    if(hours>9){\r\n        displayhours = hours;\r\n    }\r\n\r\n        \r\n\r\n    \r\n\r\n    \r\n return <Swiper {...sliderconfig} getSwiper={setParallaxSwiper}> \r\n\r\n<div className=\"main-container\">\r\n    <Helmet>\r\n    <script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>\r\n    </Helmet>\r\n            <input type=\"text\"className=\"search\"placeholder=\"Type city name...\"value={query}onChange={(e) => setQuery(e.target.value)}onKeyPress={search}/>\r\n            {weather.main && (\r\n                <>\r\n                <div className=\"city\">\r\n                    <h2 className=\"city-name\">\r\n                        <span>{weather.name}</span>\r\n                        <sup>{weather.sys.country}</sup>\r\n                    </h2>\r\n                 \r\n                    <div className=\"city-temp\">\r\n                        {Math.round(weather.main.temp)}\r\n                        <sup>&deg;C</sup>\r\n                     \r\n                    </div>\r\n                        <div className=\"more\">\r\n                            <span>Pressure: {weather.main.pressure}</span><hr></hr>\r\n                            <span>Humidity: {weather.main.humidity}</span><hr></hr>\r\n                            <span>Wind: {weather.wind.speed}</span><hr></hr>\r\n                            <span>Visibility: {weather.visibility}</span><hr></hr>\r\n                            <span>Timezone: {weather.id}</span>\r\n\r\n                            \r\n                        </div>\r\n                    <div className=\"info\">\r\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\r\n                        <p>{weather.weather[0].description}\r\n                        </p>\r\n                       \r\n                    </div>\r\n                    <p className=\"para\">> Slide to stopwatch</p>\r\n                </div>  \r\n                \r\n                </>\r\n                \r\n            )}\r\n         \r\n        </div>\r\n\r\n        {/* 2nd slide */}\r\n        <div className=\"maincontainer\">\r\n                \r\n                <div className=\"cardd\">\r\n                <svg className=\"spinner\" width=\"330px\" height=\"330px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\">\r\n     <circle className=\"path\" fill=\"transparent\" strokeWidth=\"1.5\" cx=\"33\" cy=\"33\" r=\"30\" stroke=\"url(#gradient)\"/>\r\n       <linearGradient id=\"gradient\">\r\n         <stop offset=\"50%\" stopColor=\"#0ABDE3\" stopOpacity=\"1\"/>\r\n         <stop offset=\"65%\" stopColor=\"#ffffff\" stopOpacity=\".5\"/>\r\n         <stop offset=\"100%\" stopColor=\"#ffffff\" stopOpacity=\"0\"/>\r\n       </linearGradient>\r\n    \r\n    <svg className=\"spinner-dot dot\" width=\"5px\" height=\"5px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\" x=\"37\" y=\"1.5\">\r\n       <circle className=\"path\" fill=\"#0ABDE3\" cx=\"33\" cy=\"33\" r=\"30\"/>\r\n      \r\n    </svg> \r\n  </svg> \r\n                <div className=\"display\" contentEditable='true' dangerouslySetInnerHTML={{ __html:displayhours + \":\" + displayminutes + \":\" + displayseconds }}></div>\r\n                </div>\r\n               {/* buttons */}\r\n                <div className=\"buttons\">\r\n                    \r\n                {\r\n                    !Active && !Pause ?\r\n                    <button className=\"btn\" onClick={watchstart}>START</button>\r\n                \r\n                    : (\r\n                    Pause ? <button className=\"btn\" onClick={watchpause}>PAUSE</button> :\r\n                    <button className=\"btn\" onClick={watchresume}>RESUME</button> \r\n                     )\r\n            }\r\n                      <button className=\"btn\" onClick={watchreset} disabled={!Active}>RESET</button>\r\n                 \r\n                 </div>\r\n                 {/* <div className=\"buttons\">\r\n                    <ul>\r\n                {\r\n                    !Active && !Pause ?\r\n                    <li><i className=\"fas fa-stopwatch\" onClick={watchstart}></i></li>\r\n                \r\n                    : (\r\n                    Pause ? <li><i className=\"fas fa-pause \" onClick={watchpause}></i></li> :\r\n                    <li><i className=\"fas fa-play \" onClick={watchresume}></i></li> \r\n                     )\r\n            }\r\n                      <li><i className=\"fas fa-stop \" onClick={watchreset} disabled={!Active}></i></li>\r\n                  </ul>\r\n                 </div> */}\r\n            \r\n                   \r\n        </div>\r\n\r\n </Swiper>\r\n};\r\n\r\nexport default Slider;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"45"},{"ruleId":"43","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":9,"nodeType":"49","messageId":"50","endLine":2,"endColumn":21},{"ruleId":"47","severity":1,"message":"51","line":3,"column":9,"nodeType":"49","messageId":"50","endLine":3,"endColumn":15},{"ruleId":"47","severity":1,"message":"52","line":3,"column":17,"nodeType":"49","messageId":"50","endLine":3,"endColumn":28},{"ruleId":"47","severity":1,"message":"53","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":18},{"ruleId":"41","replacedBy":"54"},{"ruleId":"43","replacedBy":"55"},{"ruleId":"47","severity":1,"message":"56","line":1,"column":27,"nodeType":"49","messageId":"50","endLine":1,"endColumn":36},{"ruleId":"47","severity":1,"message":"57","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":16},{"ruleId":"47","severity":1,"message":"53","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":18},{"ruleId":"47","severity":1,"message":"58","line":21,"column":12,"nodeType":"49","messageId":"50","endLine":21,"endColumn":26},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],"no-unused-vars","'fetchweather' is defined but never used.","Identifier","unusedVar","'Swiper' is defined but never used.","'SwiperSlide' is defined but never used.","'SwiperCore' is defined but never used.",["59"],["60"],"'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","'parallaxSwiper' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
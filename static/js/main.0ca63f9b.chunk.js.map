{"version":3,"sources":["api/fetchweather.js","components/Slider.js","App.jsx","index.js"],"names":["fetchweather","query","a","axios","get","params","q","units","AppID","data","sliderconfig","containerClass","parallax","effect","Slider","useState","setParallaxSwiper","setQuery","weather","setWeather","countRef","useRef","search","e","key","currenttime","Date","getHours","document","body","className","seconds","setSeconds","minutes","setMinutes","hours","setHours","Active","setActive","Pause","setPause","displayseconds","toString","displayminutes","displayhours","getSwiper","Helmet","src","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","pressure","humidity","wind","speed","visibility","id","icon","alt","description","width","height","viewBox","xmlns","fill","strokeWidth","cx","cy","r","stroke","offset","stopColor","stopOpacity","x","y","contentEditable","dangerouslySetInnerHTML","__html","onClick","clearInterval","current","setInterval","prevState","disabled","App","ReactDOM","render","getElementById"],"mappings":"wPAKaA,EAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACPC,IAAMC,IAJf,kDAIwB,CAChCC,OAAQ,CACJC,EAAEL,EACFM,MAAO,SACRC,MAPS,sCAEY,uBACrBC,EADqB,EACrBA,KADqB,kBASjBA,GATiB,2CAAH,sD,4DCMnBC,EAAe,CACjBC,eAAgB,mBAChBC,UAAU,EACVC,OAAO,SAkNIC,EA7MA,WAAM,IAAD,EAC2BC,mBAAS,MADpC,mBACMC,GADN,aAEUD,mBAAS,IAFnB,mBAETd,EAFS,KAEFgB,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,KAIVC,EAAWC,iBAAO,MAGlBC,EAAM,uCAAG,WAAMC,GAAN,eAAArB,EAAA,yDACM,UAAVqB,EAAEC,IADE,gCAEgBxB,EAAaC,GAF7B,OAEGQ,EAFH,OAGHU,EAAWV,GACXQ,EAAS,IAJN,2CAAH,sDAQNQ,GAAc,IAAIC,MAAOC,WAC5BC,SAASC,OAEJD,SAASC,KAAKC,UADd,GAAIL,GAAeA,EAAc,GACR,MAGA,SArBjB,MA0BYV,mBAAS,GA1BrB,mBA0BXgB,EA1BW,KA0BFC,EA1BE,OA2BajB,mBAAS,GA3BtB,mBA2BXkB,EA3BW,KA2BFC,EA3BE,OA4BQnB,mBAAS,GA5BjB,mBA4BXoB,EA5BW,KA4BJC,EA5BI,OA6BYrB,oBAAS,GA7BrB,mBA6BTsB,EA7BS,KA6BDC,EA7BC,OA8BUvB,oBAAS,GA9BnB,mBA8BTwB,EA9BS,KA8BFC,EA9BE,KAwFZC,EAAiB,IAAKV,EAAQW,WAC/BX,EAAQ,IACPU,EAAiBV,GAErB,IAAIY,EAAiB,IAAKV,EAAQS,WAC/BT,EAAQ,IACPU,EAAiBV,GAErB,IAAIW,EAAe,IAAKT,EAAMO,WAUjC,OATMP,EAAM,IACLS,EAAeT,GAQf,eAAC,IAAD,2BAAYzB,GAAZ,IAA0BmC,UAAW7B,EAArC,UAER,sBAAKc,UAAU,iBAAf,UACI,cAACgB,EAAA,EAAD,UACA,wBAAQC,IAAI,gDAEJ,uBAAOC,KAAK,OAAMlB,UAAU,SAAQmB,YAAY,oBAAmBC,MAAOjD,EAAMkD,SAAU,SAAC5B,GAAD,OAAON,EAASM,EAAE6B,OAAOF,QAAOG,WAAY/B,IACrIJ,EAAQoC,MACL,mCACA,sBAAKxB,UAAU,OAAf,UACI,qBAAIA,UAAU,YAAd,UACI,+BAAOZ,EAAQqC,OACf,8BAAMrC,EAAQsC,IAAIC,aAGtB,sBAAK3B,UAAU,YAAf,UACK4B,KAAKC,MAAMzC,EAAQoC,KAAKM,MACzB,2CAGA,sBAAK9B,UAAU,OAAf,UACI,8CAAiBZ,EAAQoC,KAAKO,YAAgB,uBAC9C,8CAAiB3C,EAAQoC,KAAKQ,YAAgB,uBAC9C,0CAAa5C,EAAQ6C,KAAKC,SAAa,uBACvC,gDAAmB9C,EAAQ+C,cAAkB,uBAC7C,8CAAiB/C,EAAQgD,SAIjC,sBAAKpC,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYiB,IAAG,4CAAuC7B,EAAQA,QAAQ,GAAGiD,KAA1D,WAAyEC,IAAKlD,EAAQA,QAAQ,GAAGmD,cAC/H,4BAAInD,EAAQA,QAAQ,GAAGmD,iBAI3B,mBAAGvC,UAAU,OAAb,0CAUZ,sBAAKA,UAAU,gBAAf,UAEQ,sBAAKA,UAAU,QAAf,UACA,sBAAKA,UAAU,UAAUwC,MAAM,QAAQC,OAAO,QAAQC,QAAQ,YAAYC,MAAM,6BAAhF,UACX,wBAAQ3C,UAAU,OAAO4C,KAAK,cAAcC,YAAY,MAAMC,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,OAAO,mBAC1F,iCAAgBb,GAAG,WAAnB,UACE,sBAAMc,OAAO,MAAMC,UAAU,UAAUC,YAAY,MACnD,sBAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAY,OACnD,sBAAMF,OAAO,OAAOC,UAAU,UAAUC,YAAY,SAGzD,qBAAKpD,UAAU,kBAAkBwC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,MAAM,6BAA6BU,EAAE,KAAKC,EAAE,MAA1H,SACG,wBAAQtD,UAAU,OAAO4C,KAAK,UAAUE,GAAG,KAAKC,GAAG,KAAKC,EAAE,YAIjD,qBAAKhD,UAAU,UAAUuD,gBAAgB,OAAOC,wBAAyB,CAAEC,OAAO3C,EAAe,IAAMD,EAAiB,IAAMF,QAG9H,sBAAKX,UAAU,UAAf,UAGKO,GAAWE,EAIZA,EAAQ,wBAAQT,UAAU,MAAM0D,QA5H/B,WACbhD,GAAS,GACTiD,cAAcrE,EAASsE,UA0HH,mBACR,wBAAQ5D,UAAU,MAAM0D,QAvHtB,WACdhD,GAAS,GACTpB,EAASsE,QAAUC,aAAY,WAC3B3D,EAAWD,KACRA,EAAQ,KAAO,IAEdA,EAAS,EACTG,GAAW,SAAA0D,GAAS,OAAIA,EAAY,KAEjC3D,EAAQ,KAAO,IACdA,EAAQ,EACRG,GAAS,SAAAwD,GAAS,OAAIA,EAAY,SAIzC,MAwGO,oBAJA,wBAAQ9D,UAAU,MAAM0D,QA7ItB,WACdlD,GAAW,GACXE,GAAU,GACVpB,EAASsE,QAAUC,aAAY,WAC3B3D,EAAWD,KACRA,EAAQ,KAAO,IAEdA,EAAS,EACTG,GAAW,SAAA0D,GAAS,OAAIA,EAAY,KAEjC3D,EAAQ,KAAO,IACdA,EAAQ,EACRG,GAAS,SAAAwD,GAAS,OAAIA,EAAY,SAIzC,MA6HO,mBAOE,wBAAQ9D,UAAU,MAAM0D,QAtGxB,WACdhD,GAAS,GACTF,GAAU,GACVmD,cAAcrE,EAASsE,SACvB1D,EAAW,GACXE,EAAW,GACXE,EAAS,IAgGkDyD,UAAWxD,EAAxD,8BCzLPyD,EANH,WACX,OACM,cAAC,EAAD,KCPPC,IAASC,OAAO,cAAC,EAAD,IAASpE,SAASqE,eAAe,W","file":"static/js/main.0ca63f9b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\r\n\r\nexport const fetchweather = async(query) =>{ \r\nconst {data} = await axios.get(URL, {\r\n    params: {\r\n        q:query,\r\n        units: 'metric',\r\n       AppID: API_KEY,\r\n\r\n    }\r\n});\r\n    return data;\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport ReactDOM from 'react-dom';\r\nimport {fetchweather} from '../api/fetchweather';\r\n// import {Swiper, SwiperSlide} from 'swiper/react';\r\nimport SwiperCore from 'swiper';\r\nimport Swiper from 'react-id-swiper';\r\nimport 'swiper/swiper-bundle.css';\r\n\r\n\r\n\r\nconst sliderconfig = {\r\n    containerClass: 'swiper-container',\r\n    parallax: true,\r\n    effect:'slide'\r\n}\r\n\r\n\r\n   \r\nconst Slider = () =>{\r\n    const [parallaxSwiper,setParallaxSwiper] = useState(null);\r\n    const [query, setQuery] = useState('') ;\r\n    const [weather, setWeather] = useState({});\r\n    const countRef = useRef(null);\r\n\r\n\r\n    const search = async(e) =>{\r\n            if(e.key === 'Enter'){\r\n                const data = await fetchweather(query);\r\n                setWeather(data);\r\n                setQuery('');\r\n            }\r\n    }\r\n   \r\n    const currenttime = new Date().getHours();\r\n    if(document.body){\r\n        if (7<= currenttime && currenttime < 20) {\r\n            document.body.className =\"day\";\r\n        }\r\n        else{\r\n            document.body.className =\"night\";\r\n        }\r\n    }\r\n  \r\n\r\n    let [seconds, setSeconds] = useState(0);\r\n    let [minutes, setMinutes] =  useState(0);\r\n    let [hours, setHours] = useState(0);\r\n    const [Active, setActive] = useState(false);\r\n    const [Pause, setPause] = useState(false);\r\n\r\n    // for starting watch\r\n    const watchstart =() =>{\r\n        setActive (true)\r\n        setPause (true)\r\n        countRef.current = setInterval(() => {\r\n            setSeconds(seconds++);\r\n            if(seconds/60 === 1)\r\n            {\r\n                seconds =0;\r\n                setMinutes(prevState => prevState + 1);\r\n  \r\n                if(minutes/60 === 1){\r\n                    minutes=0;   \r\n                    setHours(prevState => prevState + 1);\r\n                }\r\n            } \r\n           \r\n          }, 1000);\r\n    }\r\n\r\n    // for pause\r\n    const watchpause=()=>{\r\n        setPause(false)\r\n        clearInterval(countRef.current)\r\n    }\r\n\r\n    // for resuming time\r\n    const watchresume=()=>{\r\n        setPause(true)\r\n        countRef.current = setInterval(() => {\r\n            setSeconds(seconds++);\r\n            if(seconds/60 === 1)\r\n            {\r\n                seconds =0;\r\n                setMinutes(prevState => prevState + 1);\r\n  \r\n                if(minutes/60 === 1){\r\n                    minutes=0;   \r\n                    setHours(prevState => prevState + 1);\r\n                }\r\n            } \r\n           \r\n          }, 1000);\r\n        \r\n    } \r\n\r\n    // for resetting time\r\n    const watchreset =() =>{\r\n        setPause(false)\r\n        setActive(false)\r\n        clearInterval(countRef.current)\r\n        setSeconds(0)\r\n        setMinutes(0)\r\n        setHours(0)\r\n    }\r\n\r\n    let displayseconds = \"0\" +seconds.toString();\r\n    if(seconds>9){\r\n        displayseconds = seconds;\r\n    }\r\n    let displayminutes = \"0\" +minutes.toString();\r\n    if(minutes>9){\r\n        displayminutes = minutes;\r\n    }\r\n    let displayhours = \"0\" +hours.toString();\r\n    if(hours>9){\r\n        displayhours = hours;\r\n    }\r\n\r\n        \r\n\r\n    \r\n\r\n    \r\n return <Swiper {...sliderconfig} getSwiper={setParallaxSwiper}> \r\n\r\n<div className=\"main-container\">\r\n    <Helmet>\r\n    <script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>\r\n    </Helmet>\r\n            <input type=\"text\"className=\"search\"placeholder=\"Type city name...\"value={query}onChange={(e) => setQuery(e.target.value)}onKeyPress={search}/>\r\n            {weather.main && (\r\n                <>\r\n                <div className=\"city\">\r\n                    <h2 className=\"city-name\">\r\n                        <span>{weather.name}</span>\r\n                        <sup>{weather.sys.country}</sup>\r\n                    </h2>\r\n                 \r\n                    <div className=\"city-temp\">\r\n                        {Math.round(weather.main.temp)}\r\n                        <sup>&deg;C</sup>\r\n                     \r\n                    </div>\r\n                        <div className=\"more\">\r\n                            <span>Pressure: {weather.main.pressure}</span><hr></hr>\r\n                            <span>Humidity: {weather.main.humidity}</span><hr></hr>\r\n                            <span>Wind: {weather.wind.speed}</span><hr></hr>\r\n                            <span>Visibility: {weather.visibility}</span><hr></hr>\r\n                            <span>Timezone: {weather.id}</span>\r\n\r\n                            \r\n                        </div>\r\n                    <div className=\"info\">\r\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\r\n                        <p>{weather.weather[0].description}\r\n                        </p>\r\n                       \r\n                    </div>\r\n                    <p className=\"para\">> Slide to stopwatch</p>\r\n                </div>  \r\n                \r\n                </>\r\n                \r\n            )}\r\n         \r\n        </div>\r\n\r\n        {/* 2nd slide */}\r\n        <div className=\"maincontainer\">\r\n                \r\n                <div className=\"cardd\">\r\n                <svg className=\"spinner\" width=\"330px\" height=\"330px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\">\r\n     <circle className=\"path\" fill=\"transparent\" strokeWidth=\"1.5\" cx=\"33\" cy=\"33\" r=\"30\" stroke=\"url(#gradient)\"/>\r\n       <linearGradient id=\"gradient\">\r\n         <stop offset=\"50%\" stopColor=\"#0ABDE3\" stopOpacity=\"1\"/>\r\n         <stop offset=\"65%\" stopColor=\"#ffffff\" stopOpacity=\".5\"/>\r\n         <stop offset=\"100%\" stopColor=\"#ffffff\" stopOpacity=\"0\"/>\r\n       </linearGradient>\r\n    \r\n    <svg className=\"spinner-dot dot\" width=\"5px\" height=\"5px\" viewBox=\"0 0 66 66\" xmlns=\"http://www.w3.org/2000/svg\" x=\"37\" y=\"1.5\">\r\n       <circle className=\"path\" fill=\"#0ABDE3\" cx=\"33\" cy=\"33\" r=\"30\"/>\r\n      \r\n    </svg> \r\n  </svg> \r\n                <div className=\"display\" contentEditable='true' dangerouslySetInnerHTML={{ __html:displayhours + \":\" + displayminutes + \":\" + displayseconds }}></div>\r\n                </div>\r\n               {/* buttons */}\r\n                <div className=\"buttons\">\r\n                    \r\n                {\r\n                    !Active && !Pause ?\r\n                    <button className=\"btn\" onClick={watchstart}>START</button>\r\n                \r\n                    : (\r\n                    Pause ? <button className=\"btn\" onClick={watchpause}>PAUSE</button> :\r\n                    <button className=\"btn\" onClick={watchresume}>RESUME</button> \r\n                     )\r\n            }\r\n                      <button className=\"btn\" onClick={watchreset} disabled={!Active}>RESET</button>\r\n                 \r\n                 </div>\r\n                 {/* <div className=\"buttons\">\r\n                    <ul>\r\n                {\r\n                    !Active && !Pause ?\r\n                    <li><i className=\"fas fa-stopwatch\" onClick={watchstart}></i></li>\r\n                \r\n                    : (\r\n                    Pause ? <li><i className=\"fas fa-pause \" onClick={watchpause}></i></li> :\r\n                    <li><i className=\"fas fa-play \" onClick={watchresume}></i></li> \r\n                     )\r\n            }\r\n                      <li><i className=\"fas fa-stop \" onClick={watchreset} disabled={!Active}></i></li>\r\n                  </ul>\r\n                 </div> */}\r\n            \r\n                   \r\n        </div>\r\n\r\n </Swiper>\r\n};\r\n\r\nexport default Slider;","import React from \"react\";\r\nimport {fetchweather} from './api/fetchweather';\r\nimport {Swiper, SwiperSlide} from 'swiper/react';\r\nimport SwiperCore from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\nimport './App.css';\r\nimport './components/DisplayTimer.css'\r\nimport Slider from './components/Slider';\r\n\r\nconst App = () =>{\r\n return(\r\n       <Slider/>\r\n        \r\n    )\r\n};\r\nexport default App;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}